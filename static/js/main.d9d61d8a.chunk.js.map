{"version":3,"sources":["components/contact/Contact.js","components/greeting/Greeting.js","components/nav-bar/SocialWidget.js","components/nav-bar/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Contact","className","id","onClick","e","window","alert","Component","Greeting","SocialWidget","open","NavBar","class","href","App","profile","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yVAiBeA,G,uLARP,OACI,yBAAKC,UAAU,kBACX,4BAAQC,GAAG,UAAUC,QAN7B,SAAqBC,GAEjBC,OAAOC,MAAM,+BAIT,W,GARMC,c,MCUPC,MAVf,WACI,OACI,yBAAKP,UAAU,YACX,4CACA,+DACA,4ECmBGQ,G,6LAVP,OACI,yBAAKR,UAAU,iBACX,yBAAKC,GAAG,UAAUC,QAN1B,SAAuBC,GAEnBC,OAAOK,KAAK,gDAKR,yBAAKR,GAAG,SAASC,QAXzB,SAAsBC,GAElBC,OAAOK,KAAK,sCAUR,yBAAKR,GAAG,KAAKC,QAhBrB,SAAkBC,GAEdC,OAAOK,KAAK,iD,GAJGH,cCwBZI,MAvBf,WACI,OACI,yBAAKV,UAAU,WACX,yBAAKA,UAAU,cACX,yBAAKW,MAAM,aACP,uBAAGV,GAAG,QAAQW,KAAK,KAAnB,WAEJ,kBAAC,EAAD,OAEJ,yBAAKZ,UAAU,aACX,yBAAKA,UAAU,iBACX,wBAAIC,GAAG,YACH,wBAAID,UAAU,aAAY,uBAAGY,KAAK,IAAIX,GAAG,QAAf,SAC1B,wBAAID,UAAU,aAAY,uBAAGY,KAAK,IAAIX,GAAG,QAAf,aAC1B,wBAAID,UAAU,aAAY,uBAAGY,KAAK,IAAIX,GAAG,QAAf,QAC1B,wBAAID,UAAU,aAAY,uBAAGY,KAAK,IAAIX,GAAG,QAAf,iBCHnCY,MAVf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASc,QAAQ,uBCCHC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9d61d8a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Contact.css';\n\nclass Contact extends Component {\n    render() {\n        function handleClick(e) {\n            // Open new tab to my facebook profile\n            window.alert(\"Your computer is hacked!!\");\n        };\n        return (\n            <div className=\"flex-container\">\n                <button id=\"contact\" onClick={handleClick}>:D</button>\n            </div>\n        );\n    }\n}\n\nexport default Contact;","import React, {Component} from 'react';\nimport './Greeting.css';\n\nfunction Greeting() {\n    return (\n        <div className=\"greeting\">\n            <h1>Hi there ...</h1>\n            <p>I AM A SELF-TAUGHT WEB DEVELOPER</p>\n            <p>A SYSTEM ADMINISTRATOR, AND A SCIENCE LOVER</p>\n        </div>\n    );\n}\n\nexport default Greeting;","import React, {Component} from 'react';\nimport './SocialWidget.css';\n\nclass SocialWidget extends Component {\n    render(){\n        function handleFb(e) {\n            // Open new tab to my facebook profile\n            window.open(\"https://www.facebook.com/vungocson998\");\n        };\n        function handleGithub(e) {\n            // Open new tab to my github profile\n            window.open(\"https://github.com/vungocson998\");\n        };\n        function handleLinkein(e) {\n            // Open new tab to my linkein profile\n            window.open(\"https://www.linkedin.com/in/vungocson998/\");\n        };\n        return (\n            <div className=\"social-widget\">\n                <div id=\"linkein\" onClick={handleLinkein}></div>\n                <div id=\"github\" onClick={handleGithub}></div>\n                <div id=\"fb\" onClick={handleFb}></div>                    \n            </div>\n        );\n    }    \n}\n\nexport default SocialWidget;","import React, {Component} from 'react';\nimport './NavBar.css';\nimport SocialWidget from './SocialWidget';\n\nfunction NavBar() {\n    return (\n        <div className=\"nav-bar\">\n            <div className=\"header-bar\">\n                <div class=\"site-logo\">\n                    <a id=\"title\" href=\"#\">SON VU</a>\n                </div>\n                <SocialWidget/>\n            </div>\n            <div className=\"main-menu\">\n                <nav className=\"main-nav-wrap\">\n                    <ul id=\"main-nav\">\n                        <li className=\"menu-item\"><a href=\"#\" id=\"BLOG\">BLOG</a></li>\n                        <li className=\"menu-item\"><a href=\"#\" id=\"BLOG\">PROJECTS</a></li>\n                        <li className=\"menu-item\"><a href=\"#\" id=\"BLOG\">BIO</a></li>\n                        <li className=\"menu-item\"><a href=\"#\" id=\"BLOG\">CONTACT</a></li>\n                    </ul>\n                </nav>\n            </div>\n        </div>\n    );\n}\n\nexport default NavBar","import React from 'react';\nimport './App.css';\nimport Contact from './components/contact/Contact';\nimport Greeting from './components/greeting/Greeting';\nimport NavBar from './components/nav-bar/NavBar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar/>\n      <Greeting/>\n      <Contact profile=\"www.facebook.com\"/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}